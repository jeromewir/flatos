// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: flat.sql

package queries

import (
	"context"
	"time"
)

const getFlats = `-- name: GetFlats :many
SELECT id, external_id, name, address, city, price, zip_code, size, availability, status, created_at, updated_at FROM flats
`

func (q *Queries) GetFlats(ctx context.Context) ([]Flat, error) {
	rows, err := q.db.QueryContext(ctx, getFlats)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Flat
	for rows.Next() {
		var i Flat
		if err := rows.Scan(
			&i.ID,
			&i.ExternalID,
			&i.Name,
			&i.Address,
			&i.City,
			&i.Price,
			&i.ZipCode,
			&i.Size,
			&i.Availability,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertFlat = `-- name: UpsertFlat :one
INSERT INTO flats (
    id,
    external_id,
    name,
    address,
    city,
    price,
    zip_code,
    size,
    availability,
    status,
    created_at,
    updated_at
) VALUES (
    ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
)
ON CONFLICT(external_id) DO NOTHING
RETURNING id
`

type UpsertFlatParams struct {
	ID           string
	ExternalID   string
	Name         string
	Address      string
	City         string
	Price        int64
	ZipCode      string
	Size         string
	Availability string
	Status       string
	CreatedAt    time.Time
	UpdatedAt    time.Time
}

func (q *Queries) UpsertFlat(ctx context.Context, arg UpsertFlatParams) (string, error) {
	row := q.db.QueryRowContext(ctx, upsertFlat,
		arg.ID,
		arg.ExternalID,
		arg.Name,
		arg.Address,
		arg.City,
		arg.Price,
		arg.ZipCode,
		arg.Size,
		arg.Availability,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}
